input {
    file {
            path => '/usr/share/logstash/logs/brightmail.log'
            type => 'email_gateway_'
            start_position => 'beginning'
            sincedb_path => "/dev/null"
   }
}



#update brightmail chuff logs
###############################################################################
filter{
grok  { match => [ "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:data}"] }
date  { match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" ] }
ruby  { code  => '
        if event.get("data").nil?
          event.cancel
        else
          f =  event.get("data")
          if f !~ /Brightmail/ || false
            if f =~ /,/ || false
              fx = f&.split(",") || false
              fx.each do |s|
                s = s&.strip

                if s =~ /Message\sID/ || false
                  #ans = s&.match(/\s.+\/.+/) || false
                  ans = s&.match(/\s.{2}\/.+/) || false
                  if ans
                    ##puts "mail.message.id: #{ans}"
                    #ans="#{ans}"&.delete("Message ID:")&.strip()
                    ans="#{ans}"&.strip()
                    event.set("[mail][message][id]", ans)
                  end
                end

                if s =~ /Audit\sID/ || false
                  # ##puts s
                  ans = s&.match(/[\w\d]+-.+-.+/) || false
                  if ans
                    ##puts "mail.audit.id: #{ans}"
                    ans="#{ans}"
                    event.set("[mail][audit][id]", ans)
                  end
                end

                if s =~ /sender/ || false
                  # ##puts s
                  ans_ = s&.match(/\s.+@.+/) || false
                  if ans_
                    ans = ans_.to_s&.delete(" ")
                    ##puts "mail.sender: #{ans}"
                    ans="#{ans}"
                    event.set("[mail][sender]", ans)
                  end
                end

                if s =~ /ML-/ || false
                  # ##puts s
                  ans = s&.match(/^ML-\w+/) || false
                  if ans
                    ##puts "mail.action: #{ans}"
                    ans="#{ans}"
                    event.set("[mail][action]", ans)
                  end
                end

                if s =~ /Note/ || false
                  # ##puts s
                  ans = s&.match(/\[\w+\]/) || false
                  if ans
                    anss = ans.to_s&.delete("[]")
                    ##puts "mail.note: #{anss}"
                    ans="#{ans}"
                    event.set("[mail][note]", anss)
                  end
                end

                if s =~ /Delivery\ssucceeded\sto\shost/ || false
                  # ##puts s
                  ans = s&.match(/\d+.\d+.\d+.\d+/) || false
                  if ans
                    ans="#{ans}"
                    ##puts "mail.delivery.host: #{ans}"
                    ans="#{ans}"
                    event.set("[mail][delivery][host]", ans)
                  end
                end

                # complex case
                if s =~ /Rejection\son/ || false
                  # for host
                  host = s&.match(/\d+.\d+.\d+.\d+/) || false
                  if host
                    ##puts "mail.rejected.on.host: #{host}"
                    host="#{host}"
                    event.set("[mail][rejected][on][host]", host)
                  end
                  # for port
                  portx = s&.match(/:\d+/) || false
                  if portx
                    portx="#{portx}"
                    port = portx.to_s&.delete(":")
                    ##puts "mail.rejected.on.port: #{port}"
                    event.set("[mail][rejected][on][port]", port)
                  end
                end

                # complex case
                if s =~ /sent\sto\shost/ || false
                  # for host
                  host = s&.match(/\d+.\d+.\d+.\d+/) || false
                  if host
                    ##puts "[mail][sent][to][host]: #{host}"
                    host="#{host}"
                    event.set("[mail][sent][to][host]", host)
                  end
                  # for port
                  portx = s&.match(/:\d+/) || false
                  if portx
                    portx="#{portx}"
                    port = portx.to_s&.delete(":")
                    ##puts "mail.sent.to.port: #{port}"
                    event.set("[mail][sent][to][port]", port)
                  end
                end

                # complex case
                if s =~ /from\shost/ || false
                  # for host
                  host = s&.match(/\d+.\d+.\d+.\d+/) || false
                  if host
                    ##puts "mail.from.host: #{host}"
                    host="#{host}"
                    event.set("[mail][from][host]", host)
                  end
                  # for port
                  portx = s&.match(/:\d+/) || false
                  if portx
                    portx="#{portx}"
                    port = portx.to_s&.delete(":")
                    ##puts "mail.from.port: #{port}"
                    event.set("[mail][from][port]", port)
                  end
                end

                if s =~ /recipient/ || false
                  # ##puts s
                  ans_ = s&.match(/\s.+@.+/) || false
                  if ans_
                    ans_="#{ans_}"
                    ans = ans_.to_s&.delete(" ")
                    ##puts "mail.recipient: #{ans}"
                    event.set("[mail][recipient]", ans)
                  end
                end
              end
            end
            
            #Second epilog, type
            if f =~ /|/
              if f !~ /Audit\sID/
                fx = f&.split("|") || false
                len = fx.length()
                if 4 <= len
                  ###puts fx
                  a0 = fx[0] || "None"
                  a1 = fx[1] || "None"
                  a2 = fx[2] || "None"
                  a3 = fx[3] || "None"

                  audit_id = "#{a1}"&.strip()
                  ##puts "mail.audit.id: #{audit_id}"
                  event.set("[mail][audit][id]", audit_id)

                  if a2 =~ /SUBJECT/
                    subject="#{a3}"&.strip()
                    ##puts "mail.subject: #{subject}"
                    event.set("[mail][subject]", subject)
                  #else
                  #  event.cancel
                  end

                  if a2 == "VERDICT"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.verdict: #{a3}"
                    a3 = a3&.delete("<>")
                    event.set("[mail][verdict]", a3)
                  end

                  if a2 == "ATTACH"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][attach]", a2)
                    ##puts "mail.verdict: #{a3}"
                    #a3 = a3&.delete("<>")
                    attch="#{a3}"&.strip()
                    event.set("[mail][attach]", attch)
                  end

                  if a2 == "FIRED"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.fired: #{a3}"
                    event.set("[mail][fired][email]", a3)

                    a4 = fx[4] || "None"
                    event.set("[mail][fired][content]", a4)
                  end

                  if a2 == "ACCEPT"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.accept: #{a3}"
                    if a3 =~ /:/
                      host=a3&.split(":")[0] || "None"
                      port=a3&.split(":")[1] || "None"
                      event.set("[mail][accept][host]", host)
                      event.set("[mail][accept][port]", port)
                    else
                      event.set("[mail][accept]", a3)
                    end
                  end

                  if a2 == "DELIVER"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.deliver: #{a3}"
                    if a3 =~ /:/
                      host=a3&.split(":")[0] || "None"
                      port=a3&.split(":")[1] || "None"
                      event.set("[mail][deliver][host]", host)
                      event.set("[mail][deliver][port]", port)
                    else
                      event.set("[mail][deliver]", a3)
                    end
                  end

                  if a2 == "IRCPTACTION"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.accept: #{a3}"
                    event.set("[mail][ircptaction][email]", a3)

                    a4 = fx[4] || "None"
                    event.set("[mail][ircptaction]", a4)
                  end

                  if a2 == "RECEIVED"
                    ##puts "mail.action: #{a2}"
                    event.set("[mail][action]", a2)
                    ##puts "mail.received: #{a3}"
                    event.set("[mail][received]", a3)
                  end

                  if a2 == "TRACKERID"
                    ##puts "mail.trackerid: #{a3}"
                    event.set("[mail][tracker][email]", a3)

                    a4 = fx[4] || "None"
                    event.set("[mail][message][tracker][id]", a4)
                  end

                  if a2 == "LOGICAL_IP"
                    ##puts "mail.logical.ip: #{a3}"
                    event.set("[mail][logical][ip]", a3)
                  end

                  if a2 == "SENDER"
                    ##puts "mail.logical.ip: #{a3}"
                    event.set("[mail][sender]", a3)
                  end

                  if a2 == "SOURCE"
                    ##puts "mail.source: #{a3}"
                    event.set("[mail][source]", a3)
                  end

                  if a2 == "MSG_SIZE"
                    ##puts "mail.message.size: #{a3}"
                    event.set("[mail][message][size]", a3)
                  end

                  if a2 == "EHLO"
                    ##puts "mail.message.ehlo: #{a3}"
                    event.set("[mail][message][action]", a2)
                    event.set("[mail][message][ehlo]", a3)
                  end

                  if a2 == "ORCPTS"
                    ##puts "mail.message.orcpts: #{a3}"
                    event.set("[mail][message][action]", a2)
                    event.set("[mail][message][orcpts]", a3)
                  end
                end
              end
            end
          else
            event.cancel
          end
        end
'}

mutate { remove_field => ["data", "host", "syslog_hostname", "syslog_pid", "syslog_program", "syslog_timestamp", "type"]
}
}
###############################################################################


output {
 stdout {}
 }