input {
    file {
            path => '/usr/share/logstash/logs/epp5.log'
            type => 'epp'
            start_position => 'beginning'
            sincedb_path => "/dev/null"
   }
}
#####################################################################################
filter{
    ruby  { code  => '
        if event.get("message").nil?
          event.cancel
        else
          dd1 = event.get("message")
          datas=dd1
          if datas
            datas&.split("|")&.each do |f|
              if xx=f&.match(%r{.*\[Event Name\]\s(?<event_name>[\w\s]+)})
                ans= xx[:event_name]
                event.set("[event][name]", xx[:event_name])
              end

              if xx=f&.match(%r{.*\[Client Computer\]\s(?<client_computer>.+)})
                ans= xx[:client_computer]
                event.set("[client][computer]", xx[:client_computer])
              end

              if xx=f&.match(%r{.*\[IP Address\]\s(?<ip_address>\d+\.\d+\.\d+\.\d+)})
                ans= xx[:ip_address]
                event.set("[epp][host][ip]", xx[:ip_address])
              end

              if xx=f&.match(%r{.*\[MAC Address\]\s(?<mac_address>[\w\d\-]+)})
                ans= xx[:mac_address]
                event.set("[epp][host][mac]", xx[:mac_address])
              end

              if xx=f&.match(%r{.*\[Client User\]\s(?<client_user>.+)})
                ans= xx[:client_user]
                event.set("[client][user]", xx[:client_user])
              end

              if xx=f&.match(%r{.*\[Device Type\]\s(?<device_type>.+)})
                ans= xx[:device_type]
                event.set("[device][type]", xx[:device_type])
              end

              if xx=f&.match(%r{.*\[Device\]\s(?<device>.+)})
                ans= xx[:device]
                event.set("[device][name]", xx[:device])
              end

              if xx=f&.match(%r{.*\[Device VID\]\s(?<device_vid>\d+)})
                ans= xx[:device_vid]
                event.set("[device][vid]", xx[:device_vid])
              end
              if xx=f&.match(%r{.*\[Device PID\]\s(?<device_pid>[\d\w]+)})
                ans= xx[:device_pid]
                event.set("[device][pid]", xx[:device_pid])
              end
              if xx=f&.match(%r{.*\[Device Serial\]\s(?<device_serial>.+)})
                ans= xx[:device_serial]
                event.set("[device][serial]", xx[:device_serial])
              end

              #File Name
              if xx=f&.match(%r{.*\[File Name\]\s(?<file_name>.+)})
                ans= xx[:file_name]
                event.set("[file][name]", xx[:file_name])
              end

              #File hash
              if xx=f&.match(%r{.*\[File Hash\]\s(?<file_hash>.+)})
                ans= xx[:file_hash]
                event.set("[file][hash]", xx[:file_hash])
              end

              #File type
              if xx=f&.match(%r{.*\[File Type\]\s(?<file_type>.+)})
                ans= xx[:file_type]
                event.set("[file][type]", xx[:file_type])
              end
              #File size
              if xx=f&.match(%r{.*\[File Size\]\s(?<file_size>[\d\w]+)})
                ans= xx[:file_size]
                event.set("[file][size]", xx[:file_size])
              end
            end
          end

          if datas
            datas&.split("|")&.each do |i|
              t=i&.strip()#&.delete("--")
              tt=t

              #Section
              if tt =~ /\[Section\]/ || false
                ttx=tt&.split("]")[1]
                ans= ttx&.strip
                #event.section
                event.set("[event][section]", ans)
              end
              #Administrator
              if tt =~ /\[Administrator\]/ || false
                ttx=tt&.split("]")[1]
                ans= ttx&.strip
                #admin.user
                event.set("[admin][user]", ans)
              end

              #Action Type
              if tt =~ /\[Action Type\]/ || false
                ttx=tt&.split("]")[1].downcase
                ans= ttx&.strip
                #action.type
                event.set("[action][type]", ans)
                #
              end
              # =====================================================================
              #Before
              if tt =~ /\[Before\]/ || false
                oo=datas&.split(/\[Before\]/)
                p=oo[1]&.split(/\[After\]/)[0]&.strip()
                #ans= p.split(/#/)
                #re-calibrate
                s=p&.split(/#/)
                #event.set (s)

                c=0
                s&.each do |d|

                  if d =~ /Description/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.description
                    event.set("[before][group][description]", ans)
                  end
                  if d =~ /Name/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.name
                    event.set("[before][group][name]", ans)
                  end
                  if d =~ /Department/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.department
                    event.set("[before][group][department]", ans)
                  end
                  if d =~ /Last User/ || false
                    ans= d&.split("|")[1]|| "None"
                    #before.group.department
                    event.set("[before][group][last][user]", ans)
                  end
                  #c=0
                  if d =~ /012Users/ || false
                    c=c+1
                    v=d&.split("|")[1]|| "None"
                    k= "[before][group][before][user][#{c}]"
                    #ans= k, v
                    #before.group.added.users
                    #ans= uuv, userr
                    event.set(k, v)
                    if d =~ /Right/ || false
                      v=d&.split("|")[1]&.downcase || "None"
                      k = "before][group][before][right][#{c}]"
                      ans= k, v
                      #before.group.added.users
                      #ans= uuv, userr
                      event.set(k, v)
                    end
                  end
                end
              end


              # =====================================================================
              #After
              if tt =~ /\[After\]/ || false
                oo=datas&.split(/\[After\]/)
                p=oo[1]&.strip()
                #re-calibrate
                s=p&.split(/#/)

                c=0
                s&.each do |d|

                  if d =~ /Description/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.description
                    event.set("[after][group][description]", ans)
                  end
                  if d =~ /Name/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.name
                    event.set("[after][group][name]", ans)
                  end
                  if d =~ /Department/ || false
                    ans= d&.split("|")[1]&.downcase || "None"
                    #before.group.department
                    event.set("[after][group][department]", ans)
                  end
                  if d =~ /Last User/ || false
                    ans= d&.split("|")[1] || "None"
                    #before.group.department
                    event.set("[after][group][last][user]", ans)
                  end
                  #c=0
                  if d =~ /012Users/ || false
                    c=c+1
                    v=d&.split("|")[1] || "None"
                    k = "[after][group][added][user][#{c}]"
                    #ans= k, v
                    #before.group.added.users
                    #ans= uuv, userr
                    event.set(k, v)
                  end
                  if d =~ /Right/ || false
                    c=c+1
                    v=d&.split("|")[1]&.downcase || "None"
                    k = "[after][group][added][right][#{c}]"
                    #ans= k, v
                    #before.group.added.users
                    #ans= uuv, userr
                    event.set(k, v)
                  end

                  #After.change
                end
              end
            end
          end
        end
    '}
    mutate { remove_field => ["host", "path", "part" , "type", "part_timestamp"] }
}



###############################################################################
output {
 stdout {}
 }

