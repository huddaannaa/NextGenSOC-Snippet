input {
    file {
            path => '/usr/share/logstash/logs/metadefender.log'
            type => 'netscaler'
            start_position => 'beginning'
            sincedb_path => "/dev/null"
   }
}
#####################################################################################
filter{
        ruby  { code  => '
                if event.get("message").nil?
                  event.cancel
                else
                  dd1 = event.get("message")
                  if px = dd1.match(%r{((?<data_>.+)\s\[.+:\s\d+\])})
                    greper =  px[:data_]
                  end

                  #process the key value part
                  greper.split(",").each do |dd2|
                    dd3=dd2.delete("\"").strip()
                    if dd3 =~ /=/ || false
                      if key=dd3.split("=")[0]
                        #puts key
                        if value=dd3.split("=")[1] || "_"
                          value=value.strip().delete("\'")
                          if value.length==0
                            value="_"
                          end
                          #puts "event.#{key} : #{value}"
                          event.set("[event][#{key}]", value)
                        end
                      end
                    end
                  end

                  #get the message id
                  if p = dd1.match(%r{msgid:\s(?<message_id>\d+)})
                    key="message_id"
                    ans =  p[:message_id]
                    #puts "event.#{key} : #{ans}"
                    event.set("[event][#{key}]", ans)
                  end
                end


'}
#grok { match => { "message" => "%{SYSLOGTIMESTAMP:part_timestamp}" } }
#date { match => [ "part_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" ] }
mutate { remove_field => ["host", "path", "part" , "type", "part_timestamp"] }
}



###############################################################################
output {
 stdout {}
 }
#
