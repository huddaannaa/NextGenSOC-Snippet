input {
    file {
            path => '/usr/share/logstash/logs/netscaler.log'
            type => 'netscaler'
            start_position => 'beginning'
            sincedb_path => "/dev/null"
   }
}
#####################################################################################
filter{
        ruby  { code  => '
                if event.get("message").nil?
                  event.cancel
                else
                  d = event.get("message")
                  #####################################
                  #to process netscaler config
                  if d =~ /netScalerConfigChange/
                    if p=d.match(%r{(netScalerConfigChange\s\((?<dd1x>.+)\))})
                      dd1=p[:dd1x]
                      #puts dd1
                      dd1.split(",").each do |dd2|
                        dd3=dd2.delete("\"").strip()
                        if dd3 =~ /=/ || false
                          if key=dd3.split("=")[0]
                            #puts key
                            if value=dd3.split("=")[1] || "_"
                              value=value.strip()
                              puts "#{key} : #{value}"
                            end
                          end
                        end
                      end
                    end
                  #elsif d =~ //
                  ######################################
                  else                   
                    #for the rest of the log
                    
                    #if p = d.match(%r{(\s:\sdefault\s(?<category>[_\w\s\d]+)\s[\d\s\-]+:\s)})
                    #  ans =  p[:category].downcase()
                    #  event.set("[event][ns][category]", ans)
                    #end
                    
                    if p = d.match(%r{(\sClientIP\s(?<clientip>\d+\.\d+\.\d+\.\d+)\s)})
                      ans =  p[:clientip]
                      event.set("[client][ip]", ans)
                    end
                    if p = d.match(%r{(\sClientPort\s(?<clientport>\d+)\s)})
                      ans =  p[:clientport]
                      event.set("[client][port]", ans)
                    end
                    if p = d.match(%r{(\sVserverServicePort\s(?<vserverServiceport>\d+)\s)})
                      ans =  p[:vserverServiceport]
                      event.set("[vserver][service][port]", ans)
                    end
                    if p = d.match(%r{(\sVserverServiceIP\s(?<vserverServiceip>\d+\.\d+\.\d+\.\d+)\s)})
                      ans =  p[:vserverServiceip]
                      event.set("[vserver][service][ip]", ans)
                    end
                    if p = d.match(%r{(\sClientVersion\s(?<clientversion>[\w\d\.]+)\s)})
                      ans =  p[:clientversion]
                      event.set("[client][version]", ans)
                    end
                    if p = d.match(%r{(\sTotal_bytes_send\s(?<total_bytes_send>\d+)\s)})
                      ans =  p[:total_bytes_send]
                      event.set("[total][bytes][send]", ans)
                    end
                    if p = d.match(%r{\sTotal_bytes_recv\s(?<total_bytes_recv>\d+)})
                      ans =  p[:total_bytes_recv]
                      event.set("[total][bytes][recv]", ans)
                    end
                    #source
                    if p = d.match(%r{Source\s(?<sourceip>\d+\.\d+\.\d+\.\d+)})
                      ans =  p[:sourceip]
                      event.set("[source][ip]", ans)
                    end
                    if p = d.match(%r{Source\s\d+\.\d+\.\d+\.\d+:(?<sourceport>\d+)})
                      ans =  p[:sourceport]
                      event.set("[source][port]", ans)
                    end
                    #vserver
                    if p = d.match(%r{Vserver\s(?<vserverip>\d+\.\d+\.\d+\.\d+)})
                      ans =  p[:vserverip]
                      event.set("[vserver][ip]", ans)
                    end
                    if p = d.match(%r{Vserver\s\d+\.\d+\.\d+\.\d+:(?<vserverport>\d+)})
                      ans =  p[:vserverport]
                      event.set("[vserver][port]", ans)
                    end
                    #nat
                    if p = d.match(%r{NatIP\s(?<natip>\d+\.\d+\.\d+\.\d+)})
                      ans =  p[:natip]
                      event.set("[nat][ip]", ans)
                    end
                    if p = d.match(%r{NatIP\s\d+\.\d+\.\d+\.\d+:(?<natport>\d+)})
                      ans =  p[:natport]
                      event.set("[nat][port]", ans)
                    end
                    #Destination
                    if p = d.match(%r{Destination\s(?<destinationtip>\d+\.\d+\.\d+\.\d+)})
                      ans =  p[:destinationtip]
                      event.set("[destination][ip]", ans)
                    end
                    if p = d.match(%r{Destination\s\d+\.\d+\.\d+\.\d+:(?<destinationtport>\d+)})
                      ans =  p[:destinationtport]
                      event.set("[destination][port]", ans)
                    end
                    if p = d.match(%r{Session\s(?<session>\w+)})
                      ans =  p[:session]
                      event.set("[event][session]", ans)
                    end
                    if p = d.match(%r{CipherSuite\s""(?<cyphersuite>.+)""})
                      ans =  p[:cyphersuite]
                      event.set("[event][cyphersuite]", ans)
                    end
                    if p = d.match(%r{SPCBId\s(?<spcbid>\d+)})
                      ans =  p[:spcbid]
                      event.set("[event][spcbid]", ans)
                    end
                    if p = d.match(%r{(Delink\sTime\s(?<delinktime>[\d\/:]+)\s\w{3}\s-)})
                      ans =  p[:delinktime]
                      event.set("[event][delink][time]", ans)
                    end
                    if p = d.match(%r{(End\sTime\s(?<endtime>[\d\/:]+)\s\w{3}\s-)})
                      ans =  p[:endtime]
                      event.set("[event][endtime]", ans)
                    end
                    if p = d.match(%r{(Start\sTime\s(?<starttime>[\d\/:]+)\s\w{3}\s-)})
                      ans =  p[:starttime]
                      event.set("[event][starttime]", ans)
                    end
                    #recent
                    if p = d.match(%r{(\sflags\s(?<flags>\d+))})
                      ans =  p[:flags]
                      #puts ans
                      event.set("[flags]", ans)
                    end
                    if p = d.match(%r{(\sica_rtt\s(?<ica_rtt>\d+))})
                      ans =  p[:ica_rtt]
                      #puts ans
                      event.set("[ica][rtt]", ans)
                    end
                    if p = d.match(%r{(\sclientside_rxbytes\s(?<clientside_rxbytes>\d+))})
                      ans =  p[:clientside_rxbytes]
                      #puts ans
                      event.set("[clientside][rxbytes]", ans)
                    end
                    if p = d.match(%r{(\sclientside_txbytes\s(?<clientside_txbytes>\d+))})
                      ans =  p[:clientside_txbytes]
                      #puts ans
                      event.set("[clientside][txbytes]", ans)
                    end
                    if p = d.match(%r{(\sclientside_packet_retransmits\s(?<clientside_packet_retransmits>\d+))})
                      ans =  p[:clientside_packet_retransmits]
                      #puts ans
                      event.set("[clientside][packet][retransmits]", ans)
                    end
                    if p = d.match(%r{(\sserverside_packet_retransmits\s(?<serverside_packet_retransmits>\d+))})
                      ans =  p[:serverside_packet_retransmits]
                      #puts ans
                      event.set("[serverside][packet][retransmits]", ans)
                    end
                    if p = d.match(%r{(\sclientside_rtt\s(?<clientside_rtt>\d+))})
                      ans =  p[:clientside_rtt]
                      #puts ans
                      event.set("[clientside][rtt]", ans)
                    end
                    if p = d.match(%r{(\sserverside_rtt\s(?<serverside_rtt>\d+))})
                      ans =  p[:serverside_rtt]
                      #puts ans
                      event.set("[serverside][rtt]", ans)
                    end
                    if p = d.match(%r{(\sclientside_jitter\s(?<clientside_jitter>\d+))})
                      ans =  p[:clientside_jitter]
                      #puts ans
                      event.set("[clientside][jitter]", ans)
                    end
                    if p = d.match(%r{(\sserverside_jitter\s(?<serverside_jitter>\d+))})
                      ans =  p[:serverside_jitter]
                      #puts ans
                      event.set("[serverside][jitter]", ans)
                    end
                    if p = d.match(%r{(\sdevice_serial_number\s(?<device_serial_number>\d+))})
                      ans =  p[:device_serial_number]
                      #puts ans
                      event.set("[device][serial][number]", ans)
                    end
                    if p = d.match(%r{(\sclient_cookie\s(?<client_cookie>[\d\w]+))})
                      ans =  p[:client_cookie]
                      #puts ans
                      event.set("[client][cookie]", ans)
                    end
                    if p = d.match(%r{(\schannel_update_begin\s(?<channel_update_begin>[\d\/:]+))})
                      ans =  p[:channel_update_begin]
                      #puts ans
                      event.set("[channel][update][begin]", ans)
                    end
                    if p = d.match(%r{(\sDuration\s(?<Duration>[\d\:]+))})
                      ans =  p[:Duration]
                      #puts ans
                      event.set("[duration]", ans)
                    end
                    if p = d.match(%r{(\sHttp_resources_accessed\s(?<Http_resources_accessed>\d+))})
                      ans =  p[:Http_resources_accessed]
                      #puts ans
                      event.set("[http][resources][accessed]", ans)
                    end
                    if p = d.match(%r{(\sNonHttp_services_accessed\s(?<NonHttp_services_accessed>\d+))})
                      ans =  p[:NonHttp_services_accessed]
                      #puts ans
                      event.set("[nonhttp][services][accessed]", ans)
                    end
                    if p = d.match(%r{(\sTotal_TCP_connections\s(?<Total_TCP_connections>\d+))})
                      ans =  p[:Total_TCP_connections]
                      #puts ans
                      event.set("[total][tcp][connections]", ans)
                    end
                    if p = d.match(%r{(\sTotal_UDP_flows\s(?<Total_UDP_flows>\d+))})
                      ans =  p[:Total_UDP_flows]
                      #puts ans
                      event.set("[total][udp][flows]", ans)
                    end
                    if p = d.match(%r{(\sTotal_policies_allowed\s(?<Total_policies_allowed>\d+))})
                      ans =  p[:Total_policies_allowed]
                      #puts ans
                      event.set("[total][policies][allowed]", ans)
                    end
                    if p = d.match(%r{(\sTotal_policies_denied\s(?<Total_policies_denied>\d+))})
                      ans =  p[:Total_policies_denied]
                      #puts ans
                      event.set("[total][policies][denied]", ans)
                    end
                    if p = d.match(%r{(\sTotal_compressedbytes_send\s(?<Total_compressedbytes_send>\d+))})
                      ans =  p[:Total_compressedbytes_send]
                      #puts ans
                      event.set("[total][compressedbytes][send]", ans)
                    end
                    if p = d.match(%r{(\sTotal_compressedbytes_recv\s(?<Total_compressedbytes_recv>\d+))})
                      ans =  p[:Total_compressedbytes_recv]
                      #puts ans
                      event.set("[total][compressedbytes][recv]", ans)
                    end
                    if p = d.match(%r{(\sCompression_ratio_send\s(?<Compression_ratio_send>\d+))})
                      ans =  p[:Compression_ratio_send]
                      #puts ans
                      event.set("[compression][ratio][send]", ans)
                    end
                    if p = d.match(%r{(\sCompression_ratio_send\s(?<Compression_ratio_send>[\d\.%]+))})
                      ans =  p[:Compression_ratio_send]
                      #puts ans
                      event.set("[compression][ratio][send]", ans)
                    end
                    if p = d.match(%r{(\sCompression_ratio_recv\s(?<Compression_ratio_recv>[\d\.%]+))})
                      ans =  p[:Compression_ratio_recv]
                      #puts ans
                      event.set("[compression][ratio][recv]", ans)
                    end
                    if p = d.match(%r{(\sLogoutMethod\s"(?<Compression_ratio_recv>\w+)")})
                      ans =  p[:Compression_ratio_recv]
                      #puts ans
                      event.set("[compression][ratio][recv]", ans)
                    end
                    if p = d.match(%r{(\sGroup\(s\)s\s"(?<groups>[\w\/]+)")})
                      ans =  p[:groups]
                      #puts ans
                      event.set("[groups]", ans)
                    end
                    if p = d.match(%r{(session_guid\s(?<session_guid>[\w\d]+)\s-)})
                      ans =  p[:session_guid]
                      #puts ans
                      event.set("[session][guid]", ans)
                    end
                    if p = d.match(%r{(\sdevice_serial_number\s(?<device_serial_number>\d+)\s-)})
                      ans =  p[:device_serial_number]
                      #puts ans
                      event.set("[device][serial][number]", ans)
                    end
                    if p = d.match(%r{(\ssession_setup_time\s(?<session_setup_time>[\d\:\/]+))})
                      ans =  p[:session_setup_time]
                      #puts ans
                      event.set("[session][setup][time]", ans)
                    end
                    if p = d.match(%r{(\sclient_type\s(?<client_type>\d+))})
                      ans =  p[:client_type]
                      #puts ans
                      event.set("[client][type]", ans)
                    end
                    if p = d.match(%r{(\sclient_launcher\s(?<client_launcher>\d+))})
                      ans =  p[:client_launcher]
                      #puts ans
                      event.set("[client][launcher]", ans)
                    end
                    if p = d.match(%r{(\sclient_version\s(?<client_version>[\d\.]+))})
                      ans =  p[:client_version]
                      #puts ans
                      event.set("[client][version]", ans)
                    end
                    if p = d.match(%r{(\sclient_hostname\s(?<client_hostname>[\w\d\-]+))})
                      ans =  p[:client_hostname]
                      #puts ans
                      event.set("[client][hostname]", ans)
                    end
                    if p = d.match(%r{(\sdomain_name\s(?<domain_name>[\w\.]+))})
                      ans =  p[:domain_name]
                      #puts ans
                      event.set("[domain][name]", ans)
                    end
                    if p = d.match(%r{(\sserver_name\s(?<server_name>[\w\d\-]+))})
                      ans =  p[:server_name]
                      #puts ans
                      event.set("[server][name]", ans)
                    end
                    if p = d.match(%r{(\sconnection_priority\s(?<connection_priority>\d+))})
                      ans =  p[:connection_priority]
                      #puts ans
                      event.set("[connection][priority]", ans)
                    end
                    if p = d.match(%r{(\saccess_type\s(?<access_type>\d+))})
                      ans =  p[:access_type]
                      #puts ans
                      event.set("[access][type]", ans)
                    end
                    if p = d.match(%r{(\sstatus\s(?<status>\d+))})
                      ans =  p[:status]
                      #puts ans
                      event.set("[status]", ans)
                    end
                    if p = d.match(%r{(\sapp_termination_type\s(?<app_termination_type>\d+))})
                      ans =  p[:app_termination_type]
                      #puts ans
                      event.set("[app][termination][type]", ans)
                    end
                    if p = d.match(%r{(\sapp_process_id\s(?<app_process_id>\d+))})
                      ans =  p[:app_process_id]
                      #puts ans
                      event.set("[app][process][id]", ans)
                    end
                    if p = d.match(%r{(\sapp_termination_time\s(?<app_termination_time>[\d\:\/]+))})
                      ans =  p[:app_termination_time]
                      #puts ans
                      event.set("[app][termination][time]", ans)
                    end
                    if p = d.match(%r{(\sUser\s(?<user>[\d\w]+))})
                      ans =  p[:user]
                      #puts ans
                      event.set("[user]", ans)
                    end
                    if p = d.match(%r{(\sHttp_resources_accessed\s(?<Http_resources_accessed>\d+))})
                      ans =  p[:Http_resources_accessed]
                      #puts ans
                      event.set("[http][resources][accessed]", ans)
                    end
                    if p = d.match(%r{(\sNonHttp_services_accessed\s(?<NonHttp_services_accessed>\d+))})
                      ans =  p[:NonHttp_services_accessed]
                      #puts ans
                      event.set("[nonhttp][services][accessed]", ans)
                    end
                    if p = d.match(%r{(\sTotal_TCP_connections\s(?<Total_TCP_connections>\d+))})
                      ans =  p[:Total_TCP_connections]
                      #puts ans
                      event.set("[total][tcp][connections]", ans)
                    end
                    if p = d.match(%r{(\sTotal_UDP_flows\s(?<Total_UDP_flows>\d+))})
                      ans =  p[:Total_UDP_flows]
                      #puts ans
                      event.set("[total][udp][flows]", ans)
                    end
                    if p = d.match(%r{(\sLogoutMethod\s"(?<LogoutMethod>\w+)")})
                      ans =  p[:LogoutMethod]
                      #puts ans
                      event.set("[logoutmethod]", ans)
                    end
                    if p = d.match(%r{(\sNat_ip\s"(?<natip>[\w\s]+)")})
                      ans =  p[:natip]
                      #puts ans
                      event.set("[natip]", ans)
                    end
                    if p = d.match(%r{(\sSessionId:\s(?<Sessionid>\d+))})
                      ans =  p[:Sessionid]
                      #puts ans
                      event.set("[sessionid]", ans)
                    end
                    if p = d.match(%r{(:\sContext\s(?<Sessionid>[\d\w\.\@]+))})
                      ans =  p[:Sessionid]
                      #puts ans
                      event.set("[sessionid]", ans)
                    end
                    if p = d.match(%r{(Command\s"(?<Command>[\d\w\s]+)")})
                      ans =  p[:Command]
                      #puts ans
                      event.set("[command]", ans)
                    end
                    if p = d.match(%r{(Remote_ip\s(?<Remote_ip>\d+\.\d+\.\d+\.\d+))})
                      ans =  p[:Remote_ip]
                      #puts ans
                      event.set("[remote][ip]", ans)
                    end
                    if p = d.match(%r{(Errmsg\s"(?<Errmsg>[\w\s\d\.]+)")})
                      ans =  p[:Errmsg]
                      #puts ans
                      event.set("[errmsg]", ans)
                    end
                    if p = d.match(%r{(username\:\w+\s(?<username>\w+|[\w\.\d]+))})
                      ans =  p[:username]
                      #puts ans
                      event.set("[username]", ans)
                    end
                    if p = d.match(%r{(username\:\w+\s([\w\d]+):(?<domainname>[\w\.\d]+))})
                      ans =  p[:domainname]
                      #puts ans
                      event.set("[domainname]", ans)
                    end
                    if p = d.match(%r{(connectionId\s(?<connectionid>[\w\d]+))})
                      ans =  p[:connectionid]
                      #puts ans
                      event.set("[connectionid]", ans)
                    end
                    if p = d.match(%r{(Failure_reason\s"(?<Failure_reason>[\w\s\d]+)")})
                      ans =  p[:Failure_reason]
                      #puts ans
                      event.set("[failure][reason]", ans)
                    end
                    if p = d.match(%r{(Browser\s(?<browser>[\w\s\d:;\\.)\(\/]+))})
                      ans =  p[:browser]
                      #puts ans
                      event.set("[browser]", ans)
                    end
                    if p = d.match(%r{(SSLVPN_client_type\s(?<SSLVPN_client_type>\w+))})
                      ans =  p[:SSLVPN_client_type]
                      #puts ans
                      event.set("[sslvpn][client][type]", ans)
                    end
                    if p = d.match(%r{(\suser\s(?<user>[\d\w]+))})
                      ans =  p[:user]
                      #puts ans
                      event.set("[user]", ans)
                    end
                    if p = d.match(%r{(\sclientip\s(?<clientip>\d+\.\d+\.\d+\.\d+))})
                      ans =  p[:clientip]
                      #puts ans
                      event.set("[clientip]", ans)
                    end
                    if p = d.match(%r{(\srequest:\s(?<request>[\/\w\-\_\d]+))})
                      ans =  p[:request]
                      #puts ans
                      event.set("[request]", ans)
                    end
                    if p = d.match(%r{(Command\s"(?<Command>[\d\w\s\*\"]+)")})
                      ans =  p[:Command]
                      #puts ans
                      event.set("[command]", ans)
                    end
                    if p = d.match(%r{(:\sGET\s(?<get>[\/\w\-\_\d]+))})
                      ans =  p[:get]
                      #puts ans
                      event.set("[get]", ans)
                    end
                    if p = d.match(%r{(:\sPOST\s(?<post>[\/\w\-\_\d]+))})
                      ans =  p[:post]
                      #puts ans
                      event.set("[post]", ans)
                    end
                  end
                end

'}
#grok { match => { "message" => "%{SYSLOGTIMESTAMP:part_timestamp}" } }
#date { match => [ "part_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" ] }
mutate { remove_field => ["host", "path", "part" , "type", "part_timestamp"] }
}



###############################################################################
output {
 stdout {}
 }
