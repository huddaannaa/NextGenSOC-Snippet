input {
    file {
            path => '/usr/share/logstash/logs/esxi.log'
            type => 'vmware_esxi'
            start_position => 'beginning'
            sincedb_path => "/dev/null"
   }
}
#####################################################################################

filter{
grok  { match => [ "message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{HOSTNAME:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:data}"] }
date  { match => [ "syslog_timestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss" ] }
ruby  { code  => '
                      if event.get("data").nil?
                        event.cancel                        
                      else
                      
                        f =  event.get("data")
                        
                        if command = f&.match(%r{.*(\srunning\scommand\s\'(?<running_command>.+)\')})                          
                          event.set("[esxi][command][executed]", command[:running_command])
                        end

                        if conct_from = f&.match(%r{.*(\sConnection\sfrom\s(?<connection>[\d\.]+))})                          
                          event.set("[esxi][connection][from]", conct_from[:connection])
                        end

                        if sub = f&.match(%r{.*\ssub=(?<sub>[\d\w]+)})                          
                          event.set("[esxi][sub]", sub[:sub])
                        end

                        if req = f&.match(%r{.*\sReq\s(?<req>[\d\w]+)})                          
                          event.set("[exsi][req]", req[:req])
                        end

                        if opid = f&.match(%r{.*\sopID=(?<opid>[\d\-\w]+)})                         
                          event.set("[esxi][opid]", opid[:opid])
                        end
                        
                        
                        #USER
                        if user1 = f&.match(%r{.*(\suser=(?<user>\w+))})                         
                          event.set("[esxi][user]", user1[:user])
                        end
                        
                        if user2 = f&.match(%r{.*(\sUser\s\'(?<user2>\w+)\'\s)})                         
                          event.set("[esxi][user]", user2[:user2])
                        end
                        
                        if server_namespace = f&.match(%r{.*(\s\_serverNamespace\s=\s(?<server_namespace>[\/\w]+))})                        
                          event.set("[esxi][server_namespace]", server_namespace[:server_namespace])
                        end
                        
                        
                        #PORT
                        if port1 = f&.match(%r{.*(\sport\s(?<port>\d+))})                         
                          event.set("[esxi][port]", port1[:port])
                        end
                        
                        if port2 = f&.match(%r{.*(\s_port\s=\s(?<port2>\d+))})                          
                          event.set("[esxi][port]",port2[:port2])
                        end

                        if resolved_endpoint = f&.match(%r{.*\sResolved\sendpoint\s:\s\[(?<resolved_endpoint>[\w\d:]+)\]})                         
                          event.set("[esxi][resolved][endpoint]", resolved_endpoint[:resolved_endpoint])
                        end

                        if appname = f&.match(%r{^(\w+\s(?<appname>\w+))})                         
                          event.set("[esxi][appname]", appname[:appname])
                        end

                        if action = f&.match(%r{.*(\saction\s=\s(?<action>[\w\d]+))})                  
                          event.set("[esxi][action]", action[:action])
                        end

                        if ip = f&.match(%r{.*\s(?<ip_address_from>\d+\.\d+\.\d+\.\d+)})
                          event.set("[esxi][from][ip]", ip[:ip_address_from])
                        end
                        
                        #SSH
                        if ssh2 = f&.match(%r{.*(\sssh2:\s(?<ssh2>\w+\s\w+))})                          
                          event.set("[esxi][ssh][algorithm][1]", ssh2[:ssh2])
                        end
                        
                        if ssh3 = f&.match(%r{.*(\sssh2:\s(?<ssh3>[\w\_]+))})
                          event.set("[esxi][ssh][algorithm][2]", ssh3[:ssh3])
                        end
                        
                        if ssh_action = f&.match(%r{.*sshd\[\d+\]:\s(?<xaction>[\w\_]+)})                         
                          event.set("[esxi][ssh][action]", ssh_action[:xaction])
                        end
                        
                        gh=f&.gsub("\'","\"") 
                        if fx= gh.match(%r{\"(?<source_ip>\d+\.\d+\.\d+\.\d+):(?<Source_port>\d+)\".*\"(?<destination_ip>\d+\.\d+\.\d+\.\d+):(?<destination_port>\d+)\"})
                        
                          s_ip = fx[:source_ip]
                          s_p =  fx[:Source_port]
                          d_ip = fx[:destination_ip]
                          d_p = fx[:destination_port]
                          
                          event.set("[esxi][source][ip]", s_ip)
                          event.set("[esxi][source][port]", s_p)
                          event.set("[esxi][destination][ip]", d_ip)
                          event.set("[esxi][destination][port]", d_p)
                        end
                      end
                        

'}
     
mutate { remove_field => [ "host", "syslog_hostname", "syslog_pid", "syslog_program", "syslog_timestamp", "type",
                           "data"]}

}
###############################################################################
output {
 stdout {}
 }
